// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go

// Package script_mocks is a generated GoMock package.
package script_mocks

import (
	script "danielpenchev98/http-job-processing-service/pkg/script"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContentBuilder is a mock of ContentBuilder interface.
type MockContentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockContentBuilderMockRecorder
}

// MockContentBuilderMockRecorder is the mock recorder for MockContentBuilder.
type MockContentBuilderMockRecorder struct {
	mock *MockContentBuilder
}

// NewMockContentBuilder creates a new mock instance.
func NewMockContentBuilder(ctrl *gomock.Controller) *MockContentBuilder {
	mock := &MockContentBuilder{ctrl: ctrl}
	mock.recorder = &MockContentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentBuilder) EXPECT() *MockContentBuilderMockRecorder {
	return m.recorder
}

// AddCommand mocks base method.
func (m *MockContentBuilder) AddCommand(arg0 string) script.ContentBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommand", arg0)
	ret0, _ := ret[0].(script.ContentBuilder)
	return ret0
}

// AddCommand indicates an expected call of AddCommand.
func (mr *MockContentBuilderMockRecorder) AddCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockContentBuilder)(nil).AddCommand), arg0)
}

// String mocks base method.
func (m *MockContentBuilder) String() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// String indicates an expected call of String.
func (mr *MockContentBuilderMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockContentBuilder)(nil).String))
}
