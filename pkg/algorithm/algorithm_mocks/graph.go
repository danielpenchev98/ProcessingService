// Code generated by MockGen. DO NOT EDIT.
// Source: graph.go

// Package algorithm_mocks is a generated GoMock package.
package algorithm_mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGraph is a mock of Graph interface.
type MockGraph struct {
	ctrl     *gomock.Controller
	recorder *MockGraphMockRecorder
}

// MockGraphMockRecorder is the mock recorder for MockGraph.
type MockGraphMockRecorder struct {
	mock *MockGraph
}

// NewMockGraph creates a new mock instance.
func NewMockGraph(ctrl *gomock.Controller) *MockGraph {
	mock := &MockGraph{ctrl: ctrl}
	mock.recorder = &MockGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraph) EXPECT() *MockGraphMockRecorder {
	return m.recorder
}

// GetNodes mocks base method.
func (m *MockGraph) GetNodes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockGraphMockRecorder) GetNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockGraph)(nil).GetNodes))
}

// GetParents mocks base method.
func (m *MockGraph) GetParents(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParents", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParents indicates an expected call of GetParents.
func (mr *MockGraphMockRecorder) GetParents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParents", reflect.TypeOf((*MockGraph)(nil).GetParents), arg0)
}
