// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package pkg_mocks is a generated GoMock package.
package pkg_mocks

import (
	algorithm "danielpenchev98/http-job-processing-service/pkg/algorithm"
	model "danielpenchev98/http-job-processing-service/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGraphAlgorithm is a mock of GraphAlgorithm interface.
type MockGraphAlgorithm struct {
	ctrl     *gomock.Controller
	recorder *MockGraphAlgorithmMockRecorder
}

// MockGraphAlgorithmMockRecorder is the mock recorder for MockGraphAlgorithm.
type MockGraphAlgorithmMockRecorder struct {
	mock *MockGraphAlgorithm
}

// NewMockGraphAlgorithm creates a new mock instance.
func NewMockGraphAlgorithm(ctrl *gomock.Controller) *MockGraphAlgorithm {
	mock := &MockGraphAlgorithm{ctrl: ctrl}
	mock.recorder = &MockGraphAlgorithmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphAlgorithm) EXPECT() *MockGraphAlgorithmMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockGraphAlgorithm) Apply(arg0 algorithm.Graph) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockGraphAlgorithmMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockGraphAlgorithm)(nil).Apply), arg0)
}

// MockGraphCreator is a mock of GraphCreator interface.
type MockGraphCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGraphCreatorMockRecorder
}

// MockGraphCreatorMockRecorder is the mock recorder for MockGraphCreator.
type MockGraphCreatorMockRecorder struct {
	mock *MockGraphCreator
}

// NewMockGraphCreator creates a new mock instance.
func NewMockGraphCreator(ctrl *gomock.Controller) *MockGraphCreator {
	mock := &MockGraphCreator{ctrl: ctrl}
	mock.recorder = &MockGraphCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphCreator) EXPECT() *MockGraphCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGraphCreator) Create(task []model.Task) (algorithm.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", task)
	ret0, _ := ret[0].(algorithm.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGraphCreatorMockRecorder) Create(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGraphCreator)(nil).Create), task)
}
